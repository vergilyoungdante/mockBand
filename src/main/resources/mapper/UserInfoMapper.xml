<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mockband.mapper.UserInfoMapper" >
  <resultMap id="BaseResultMap" type="com.example.mockband.entity.UserInfo" >
    <id column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="bank_name" property="bankName" jdbcType="VARCHAR" />
    <result column="login_name" property="loginName" jdbcType="VARCHAR" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="user_department" property="userDepartment" jdbcType="VARCHAR" />
    <result column="user_mobile" property="userMobile" jdbcType="VARCHAR" />
    <result column="user_credits" property="userCredits" jdbcType="DOUBLE" />
    <result column="user_growing_coin" property="userGrowingCoin" jdbcType="DOUBLE" />
    <result column="user_bond" property="userBond" jdbcType="DOUBLE" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, bank_name, login_name, user_name, user_department, user_mobile, user_credits, 
    user_growing_coin, user_bond, create_time, modify_time
  </sql>

  <select id="selectByLoginName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from user_info_tbl
    where login_name = #{loginName,jdbcType=VARCHAR}
  </select>

  <select id="selectPeopleCredit" resultMap="BaseResultMap" parameterType="java.util.Map">
    select * from user_info_tbl
    <where>
      <if test="loginName != null and loginName != ''">
        and login_name like concat('%', #{loginName}, '%')
      </if>
    </where>
    limit #{startIndex}, #{pageSize}
  </select>

  <select id="selectPeopleCreditCount" resultType="java.lang.Integer" parameterType="java.util.Map">
    select count(*) from user_info_tbl
    <where>
      <if test="loginName != null and loginName != ''">
        and login_name like concat('%', #{loginName}, '%')
      </if>
    </where>
  </select>

  <select id="selectCustomer" resultMap="BaseResultMap" parameterType="java.util.Map">
    select * from user_info_tbl
    <where>
      bank_name = #{bankName,jdbcType=VARCHAR}
      <if test="loginName != null and loginName != ''">
        and login_name like concat('%', #{loginName}, '%')
      </if>
    </where>
    limit #{startIndex}, #{pageSize}
  </select>

  <select id="CountCustomer" resultType="java.lang.Integer" parameterType="java.util.Map">
    select count(*) from user_info_tbl
    <where>
      bank_name = #{bankName,jdbcType=VARCHAR}
      <if test="loginName != null and loginName != ''">
        and login_name like concat('%', #{loginName}, '%')
      </if>
    </where>
  </select>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user_info_tbl
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_info_tbl
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.mockband.entity.UserInfo" >
    insert into user_info_tbl (user_id, bank_name, login_name, 
      user_name, user_department, user_mobile, 
      user_credits, user_growing_coin, user_bond, 
      create_time, modify_time)
    values (#{userId,jdbcType=INTEGER}, #{bankName,jdbcType=VARCHAR}, #{loginName,jdbcType=VARCHAR}, 
      #{userName,jdbcType=VARCHAR}, #{userDepartment,jdbcType=VARCHAR}, #{userMobile,jdbcType=VARCHAR}, 
      #{userCredits,jdbcType=DOUBLE}, #{userGrowingCoin,jdbcType=DOUBLE}, #{userBond,jdbcType=DOUBLE}, 
      #{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.example.mockband.entity.UserInfo" >
    insert into user_info_tbl
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="bankName != null" >
        bank_name,
      </if>
      <if test="loginName != null" >
        login_name,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="userDepartment != null" >
        user_department,
      </if>
      <if test="userMobile != null" >
        user_mobile,
      </if>
      <if test="userCredits != null" >
        user_credits,
      </if>
      <if test="userGrowingCoin != null" >
        user_growing_coin,
      </if>
      <if test="userBond != null" >
        user_bond,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="bankName != null" >
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null" >
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userDepartment != null" >
        #{userDepartment,jdbcType=VARCHAR},
      </if>
      <if test="userMobile != null" >
        #{userMobile,jdbcType=VARCHAR},
      </if>
      <if test="userCredits != null" >
        #{userCredits,jdbcType=DOUBLE},
      </if>
      <if test="userGrowingCoin != null" >
        #{userGrowingCoin,jdbcType=DOUBLE},
      </if>
      <if test="userBond != null" >
        #{userBond,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.mockband.entity.UserInfo" >
    update user_info_tbl
    <set >
      <if test="bankName != null" >
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null" >
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userDepartment != null" >
        user_department = #{userDepartment,jdbcType=VARCHAR},
      </if>
      <if test="userMobile != null" >
        user_mobile = #{userMobile,jdbcType=VARCHAR},
      </if>
      <if test="userCredits != null" >
        user_credits = #{userCredits,jdbcType=DOUBLE},
      </if>
      <if test="userGrowingCoin != null" >
        user_growing_coin = #{userGrowingCoin,jdbcType=DOUBLE},
      </if>
      <if test="userBond != null" >
        user_bond = #{userBond,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.mockband.entity.UserInfo" >
    update user_info_tbl
    set bank_name = #{bankName,jdbcType=VARCHAR},
      login_name = #{loginName,jdbcType=VARCHAR},
      user_name = #{userName,jdbcType=VARCHAR},
      user_department = #{userDepartment,jdbcType=VARCHAR},
      user_mobile = #{userMobile,jdbcType=VARCHAR},
      user_credits = #{userCredits,jdbcType=DOUBLE},
      user_growing_coin = #{userGrowingCoin,jdbcType=DOUBLE},
      user_bond = #{userBond,jdbcType=DOUBLE},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

  <update id="updateByLoginName" parameterType="com.example.mockband.entity.UserInfo" >
    update user_info_tbl
    set user_department = #{userDepartment,jdbcType=VARCHAR},
        user_mobile = #{userMobile,jdbcType=VARCHAR},
        user_bond = #{userBond,jdbcType=DOUBLE},
        user_growing_coin = #{userGrowingCoin,jdbcType=DOUBLE},
        user_credits = #{userCredits,jdbcType=DOUBLE}
    where login_name = #{loginName,jdbcType=VARCHAR}
  </update>
</mapper>